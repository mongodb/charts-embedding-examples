package com.mongodb.charts;

import static spark.Spark.get;
import static spark.Spark.staticFiles;

import java.math.BigInteger;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.time.Duration;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

/**
 * A simple web server which returns a signed embedding url for a given chart.
 *
 * Server by default runs on port 4567.
 */
public class App {
  // Replace these constants with the correct values for your Charts instance

  // Replace with the base URL to your Charts instance, e.g.
  // https://charts.mongodb.com/charts-foo-abcde
  private final static String CHARTS_EMBEDDING_BASE_URL = "~REPLACE~CHARTS_EMBEDDING_BASE_URL";

  // Replace with your Charts Tenant ID from the Embed Chart snippet
  private final static String CHARTS_TENANT_ID = "~REPLACE~CHARTS_TENANT_ID";

  // Replace with the Embedding Signing Key generated by your Charts admin
  private final static String EMBEDDING_SIGNING_KEY = "~REPLACE~EMBEDDING_SIGNING_KEY";

  // Set to your preferred expiry period
  private final static Duration expiryTime = Duration.ofMinutes(5);

  public static void main(String[] args) {
     staticFiles.location("www");

     get("/api/embeddedchart/:id", (request, response) -> {
       response.type("text/plain");
       final String id = request.params(":id");
       return generateSecureUrl(id);
      });
  }

  private static String generateSecureUrl(String id) {
    // Remember, in a real application, you should ensure your user is authenticated
    // and authorized to view the chart before you return the signed URL.

    long timestamp = System.currentTimeMillis() / 1000;

    String payload = String.format("id=%s&tenant=%s&timestamp=%d&expires-in=%d", id, CHARTS_TENANT_ID, timestamp, expiryTime.getSeconds());
    String signature = generateSignedPayload(EMBEDDING_SIGNING_KEY, payload);

    StringBuilder url = new StringBuilder(CHARTS_EMBEDDING_BASE_URL)
      .append("/embed/charts?")
      .append("id=").append(id)
      .append("&tenant=").append(CHARTS_TENANT_ID)
      .append("&timestamp=").append(timestamp)
      .append("&expires-in=").append(expiryTime.toMillis() / 1000)
      .append("&signature=").append(signature);

      return url.toString();
  }

  private static String generateSignedPayload(String key, String payload) {
    try {
      Mac hasher = Mac.getInstance("HmacSHA256");
      hasher.init(new SecretKeySpec(key.getBytes(), "HmacSHA256"));
      byte[] hashedBytes = hasher.doFinal(payload.getBytes());

      return new BigInteger(1, hashedBytes).toString(16);
    } catch (NoSuchAlgorithmException e) {
      e.printStackTrace();
      throw new RuntimeException("Could not get algorithm for HmacSHA256");

    } catch (InvalidKeyException e) {
      e.printStackTrace();
      throw new RuntimeException("Provided key was invalid, possibly null");
    }
  }
}
